shiny::runApp('C:/Users/Swob1/OneDrive/Desktop/2018-ws-mobility-dashboard')
runApp('C:/Users/Swob1/OneDrive/Desktop/2018-ws-mobility-dashboard')
runApp('C:/Users/Swob1/OneDrive/Desktop/2018-ws-mobility-dashboard')
runApp('C:/Users/Swob1/OneDrive/Desktop/2018-ws-mobility-dashboard')
runApp('C:/Users/Swob1/OneDrive/Desktop/2018-ws-mobility-dashboard')
runApp('C:/Users/Swob1/OneDrive/Desktop/2018-ws-mobility-dashboard')
runApp('C:/Users/Swob1/OneDrive/Desktop/2018-ws-mobility-dashboard')
library(FSelector) #for feature selection
library(party) #for classification algorithm decision trees
library(class) #for classification algorithm kNN
library(e1071) #for classification algorithm SVM
library(randomForest) #further random forest
library(ROCR) #for classification performance
library(dplyr)
library(magrittr)
library(plotly)
library(RColorBrewer)
# Load data
load("C:/Users/Swob1/OneDrive/Desktop/Semester 1/Business Intelligence and Analytics/bonus_exercise4.RData")
# Inspecting customers
#str(customers)
#summary(customers)
# Inspecting smd
#str(smd)
#summary(smd)
# Inspecting geodata
#str(geodata)
#summary(geodata)
#Removing values that are duplicate
customers <- customers[!duplicated(customers),]
smd       <- smd[!duplicated(smd),]
geodata   <- geodata[!duplicated(geodata),]
#Converting empty cells to NA and merging them in the new frame df.na
customers$housing.type <- ifelse(customers$housing.type=="", NA, as.character(customers$housing.type))
df.na1 <- subset(customers, is.na(customers$housing.type), select=VID)
df.na2 <- subset(geodata, is.na(geodata$buildingarea.mean), select=VID)
df.na <- merge(df.na1, df.na2, by="VID", all=TRUE)
#Removing NA-Values to keep consistency in the data frames due to the feature selection later on
customers <- anti_join(customers, df.na, by="VID")
smd       <- smd[-c(which(row.names(smd) %in% df.na$VID)),]
geodata   <- anti_join(geodata, df.na, by="VID")
#Preparing number of residents to put every entry in a context
adults <- as.integer(ifelse(customers$residents.numAdult=="5 oder mehr",
"5",customers$residents.numAdult))
children <- as.integer(ifelse(customers$residents.numChildren=="5 oder mehr",
"5",customers$residents.numChildren))
#Labeling empty values as "Unknown"
housingtype <- ifelse(customers$housing.type=="",
"Unkown",as.character(customers$housing.type))
table(housingtype, ifelse(is.na(children), adults, adults+children))
#                ***Provide an explanation why it is difficult to predict the class terraced house.***
#-> There are some very rare classes of terraced house and you hardly can't train them.
#Preparing if customer has children
hasChildren <- as.factor(ifelse(is.na(customers$residents.numChildren), "no", "yes"))
customers$hasChildren <- hasChildren
customers$pNumResidents <- sapply(ifelse(is.na(children), adults, adults+children),
function(personcount) {
if(personcount==0 || is.na(personcount)){
return(NA)
} else if(personcount==1){
return("1 person")
} else if(personcount==2){
return("2 persons")
} else {
return(">2 persons")
}
})
customers$pNumResidents <- ordered(customers$pNumResidents,
levels=c("1 person",
"2 persons",
">2 persons"))
#Preparing the household types
customers$housing.type <- as.factor(ifelse(customers$housing.type == "semi-detached house" |
customers$housing.type == "terraced house",
"semi-detached or terraced house",
as.character(customers$housing.type)))
#Creating a palette for colour schemes
mycolors <- brewer.pal(6, "Dark2")
#Plotting all dependent variables
barplot(table(customers$housing.type), main="Distribution of the Household Type",
ylim=c(0,120),
xlab="Household Type",
ylab="Number of Households",
beside=TRUE, cex.names=0.6, # adjust size of the labels
col=mycolors[c(1,2,3,4,5,6)])
barplot(table(customers$hasChildren), main="Distribution if a Household has Children",
ylim=c(0,180),
xlab="Households with Children",
legend=rownames(customers$hasChildren), beside=TRUE, cex.names=0.6, # adjust size of the labels
col=mycolors[c(1,2,3,4,5,6)])
barplot(table(ordered(customers$pNumResidents,
levels=c("1 person", "2 persons",">2 persons"))), main="Distribution of the Number of Residents", # ordering residents
ylim=c(0,100),
xlab="Number of Residents",
cex.names=0.6, # adjust size of the labels
col=mycolors[c(1,2,3,4,5,6)])
# Load data
load("C:/Users/Swob1/OneDrive/Desktop/Semester 1/Business Intelligence and Analytics/bonus_exercise4.RData")
View(smd)
View(customers)
View(geodata)
#Removing values that are duplicate
customers <- customers[!duplicated(customers),]
smd       <- smd[!duplicated(smd),]
geodata   <- geodata[!duplicated(geodata),]
#Converting empty cells to NA and merging them in the new frame df.na
customers$housing.type <- ifelse(customers$housing.type=="", NA, as.character(customers$housing.type))
df.na1 <- subset(customers, is.na(customers$housing.type), select=VID)
df.na2 <- subset(geodata, is.na(geodata$buildingarea.mean), select=VID)
View(df.na1)
View(df.na2)
df.na <- merge(df.na1, df.na2, by="VID", all=TRUE)
View(df.na)
#Removing NA-Values to keep consistency in the data frames due to the feature selection later on
customers <- anti_join(customers, df.na, by="VID")
smd       <- smd[-c(which(row.names(smd) %in% df.na$VID)),]
geodata   <- anti_join(geodata, df.na, by="VID")
#Preparing number of residents to put every entry in a context
adults <- as.integer(ifelse(customers$residents.numAdult=="5 oder mehr",
"5",customers$residents.numAdult))
children <- as.integer(ifelse(customers$residents.numChildren=="5 oder mehr",
"5",customers$residents.numChildren))
#Labeling empty values as "Unknown"
housingtype <- ifelse(customers$housing.type=="",
"Unkown",as.character(customers$housing.type))
table(housingtype, ifelse(is.na(children), adults, adults+children))
# Load data
load("C:/Users/Swob1/OneDrive/Desktop/Semester 1/Business Intelligence and Analytics/bonus_exercise4.RData")
# Inspecting customers
#str(customers)
#summary(customers)
# Inspecting smd
#str(smd)
#summary(smd)
# Inspecting geodata
#str(geodata)
#summary(geodata)
#Removing values that are duplicate
customers <- customers[!duplicated(customers),]
smd       <- smd[!duplicated(smd),]
geodata   <- geodata[!duplicated(geodata),]
#Converting empty cells to NA and merging them in the new frame df.na
customers$housing.type <- ifelse(customers$housing.type=="", NA, as.character(customers$housing.type))
df.na1 <- subset(customers, is.na(customers$housing.type), select=VID)
df.na2 <- subset(geodata, is.na(geodata$buildingarea.mean), select=VID)
df.na <- merge(df.na1, df.na2, by="VID", all=TRUE)
#Removing NA-Values to keep consistency in the data frames due to the feature selection later on
customers <- anti_join(customers, df.na, by="VID")
smd       <- smd[-c(which(row.names(smd) %in% df.na$VID)),]
geodata   <- anti_join(geodata, df.na, by="VID")
#Preparing number of residents to put every entry in a context
adults <- as.integer(ifelse(customers$residents.numAdult=="5 oder mehr",
"5",customers$residents.numAdult))
children <- as.integer(ifelse(customers$residents.numChildren=="5 oder mehr",
"5",customers$residents.numChildren))
#Labeling empty values as "Unknown"
housingtype <- ifelse(customers$housing.type=="",
"Unkown",as.character(customers$housing.type))
table(housingtype, ifelse(is.na(children), adults, adults+children))
#                ***Provide an explanation why it is difficult to predict the class terraced house.***
#-> There are some very rare classes of terraced house and you hardly can't train them.
#Preparing if customer has children
hasChildren <- as.factor(ifelse(is.na(customers$residents.numChildren), "no", "yes"))
customers$hasChildren <- hasChildren
customers$pNumResidents <- sapply(ifelse(is.na(children), adults, adults+children),
function(personcount) {
if(personcount==0 || is.na(personcount)){
return(NA)
} else if(personcount==1){
return("1 person")
} else if(personcount==2){
return("2 persons")
} else {
return(">2 persons")
}
})
customers$pNumResidents <- ordered(customers$pNumResidents,
levels=c("1 person",
"2 persons",
">2 persons"))
#Preparing the household types
customers$housing.type <- as.factor(ifelse(customers$housing.type == "semi-detached house" |
customers$housing.type == "terraced house",
"semi-detached or terraced house",
as.character(customers$housing.type)))
#Creating a palette for colour schemes
mycolors <- brewer.pal(6, "Dark2")
#Plotting all dependent variables
barplot(table(customers$housing.type), main="Distribution of the Household Type",
ylim=c(0,120),
xlab="Household Type",
ylab="Number of Households",
beside=TRUE, cex.names=0.6, # adjust size of the labels
col=mycolors[c(1,2,3,4,5,6)])
barplot(table(customers$hasChildren), main="Distribution if a Household has Children",
ylim=c(0,180),
xlab="Households with Children",
legend=rownames(customers$hasChildren), beside=TRUE, cex.names=0.6, # adjust size of the labels
col=mycolors[c(1,2,3,4,5,6)])
barplot(table(ordered(customers$pNumResidents,
levels=c("1 person", "2 persons",">2 persons"))), main="Distribution of the Number of Residents", # ordering residents
ylim=c(0,100),
xlab="Number of Residents",
cex.names=0.6, # adjust size of the labels
col=mycolors[c(1,2,3,4,5,6)])
household <- smd["9b881cbf43100f1905610345304483e0",]
# Define and implement some features from SMD (e.g. mean consumption, mean
# consumption in the evening)
calcFeatures.smd <- function(SMD){
#SMD: the load trace for one week (vector with 672 elements)
#create a matrix with 7 columns for each day
dm15=matrix(as.numeric(SMD),ncol=7)
# define some times
weekday   <-  1:(5*4*24)
weekend   <- (5*4*24+1):672
night     <- (1*4+1):(6*4)
morning   <- (6*4+1):(10*4)
noon      <- (10*4+1):(14*4)
afternoon <- (14*4+1):(18*4)
evening   <- (18*4+1):(22*4)
#data.frame for the results
D=data.frame(c_week=mean(dm15, na.rm=T))
#calculate consumption features
D$c_night     <- mean(dm15[night,     1:7], na.rm=T)
D$c_morning   <- mean(dm15[morning,   1:7], na.rm=T)
D$c_noon      <- mean(dm15[noon,      1:7], na.rm=T)
D$c_afternoon <- mean(dm15[afternoon, 1:7], na.rm=T)
D$c_evening   <- mean(dm15[evening,   1:7], na.rm=T)
#calculate statistical features
D$s_we_max <- max(dm15[weekend], na.rm=T)
D$s_we_min <- min(dm15[weekend], na.rm=T)
D$s_wd_max <- max(dm15[weekday], na.rm=T)
D$s_wd_min <- min(dm15[weekday], na.rm=T)
#calculate relations
D$r_min_wd_we <- D$s_wd_min / D$s_we_min #division by 0 leads to NaN!
D$r_min_wd_we <- ifelse(is.na(D$r_min_wd_we), 0, D$r_min_wd_we)
D$r_max_wd_we <- D$s_wd_max / D$s_we_max
D$r_max_wd_we <- ifelse(is.na(D$r_max_wd_we), 0, D$r_max_wd_we)
#Additional features
#Time interval of the first peak in one week of consumption (integer between 1 and 672)
D$t15_max           <- which.max(dm15)
#Standard deviation of all consumption values of the household
D$s_sd_week         <- sd(dm15, na.rm=T)
#Time intervals with consumption above the level of 1 kWh in one week
D$t15_above_1kw     <- length(which(dm15 > 1.0))
#Time intervals with consumption above the level of 0.5 kWh in one week
D$t15_above_0.5kw   <- length(which(dm15 < 0.5))
#Time intervals with consumption above the mean consumption plus one standard deviation of the household
D$t15_above_mean_sd <- length(which(dm15 > D$c_week + D$s_sd_week))
return(D)
}
#Calculate Feature for one household
calcFeatures.smd(household)
SMFeatures <- calcFeatures.smd(smd[1,])
for(i in 2:nrow(smd)){
SMFeatures <- rbind(SMFeatures, calcFeatures.smd(smd[i,]))
}
#Performing feature selection with cfs and consistency
# i) only smart meter data
createSmartMeterFeatures <- cbind(customers, SMFeatures)
SMFeaturesAll            <- setdiff(colnames(createSmartMeterFeatures),
c("VID", "residents.numAdult",
"residents.numChildren", "housing.type",
"has_children", "pNumResidents", "housing_type"))
# ii) only geographic features
createGeodataFeatures <- merge(customers, geodata, by="VID")
FeaturesGeoAll        <- setdiff(colnames(createGeodataFeatures),
c("VID", "residents.numAdult",
"residents.numChildren", "housing.type",
"has_children", "pNumResidents", "housing_type"))
# iii) both
CreateAll           <- merge(createSmartMeterFeatures, geodata, by="VID")
allFeatures         <- setdiff(colnames(CreateAll),
c("VID", "residents.numAdult",
"residents.numChildren", "housing.type",
"has_children", "pNumResidents", "housing_type"))
#Applying cfs and consistency for "has_children", "pNumeResidents" and "housing_type"
#has_children
SmartMeter_hasChildren <- cfs(formula=as.simple.formula(attributes=SMFeaturesAll,
class="hasChildren"),
data=createSmartMeterFeatures)
SmartMeter_hasChildren
consistency(formula=as.simple.formula(attributes=SMFeaturesAll, class="hasChildren"),
data=createSmartMeterFeatures)
cfs(formula=as.simple.formula(attributes=FeaturesGeoAll, class="hasChildren"),
data=createGeodataFeatures)
consistency(formula=as.simple.formula(attributes=FeaturesGeoAll, class="hasChildren"),
data=createGeodataFeatures)
cfs(formula=as.simple.formula(attributes=allFeatures, class="hasChildren"),
data=CreateAll)
consistency(formula=as.simple.formula(attributes=allFeatures, class="hasChildren"),
data=CreateAll)
#dependent variable: "pNumResidents"
SmartMeter_pNumResidents <- cfs(formula=as.simple.formula(attributes=SMFeaturesAll, class="pNumResidents"),
data=createSmartMeterFeatures)
SmartMeter_pNumResidents
consistency(formula=as.simple.formula(attributes=SMFeaturesAll, class="pNumResidents"),
data=createSmartMeterFeatures)
cfs(formula=as.simple.formula(attributes=FeaturesGeoAll, class="pNumResidents"),
data=createGeodataFeatures)
consistency(formula=as.simple.formula(attributes=FeaturesGeoAll, class="pNumResidents"),
data=createGeodataFeatures)
cfs(formula=as.simple.formula(attributes=allFeatures, class="pNumResidents"),
data=CreateAll)
consistency(formula=as.simple.formula(attributes=allFeatures, class="pNumResidents"),
data=CreateAll)
#dependent variable: "housing_type"
cfs(formula=as.simple.formula(attributes=SMFeaturesAll, class="housingtype"),
data=createSmartMeterFeatures)
consistency(formula=as.simple.formula(attributes=SMFeaturesAll, class="housingtype"),
data=createSmartMeterFeatures)
SmartMeter_housing_type <- cfs(formula=as.simple.formula(attributes=FeaturesGeoAll, class="housingtype"),
data=createGeodataFeatures)
SmartMeter_housing_type
consistency(formula=as.simple.formula(attributes=FeaturesGeoAll, class="housingtype"),
data=createGeodataFeatures)
cfs(formula=as.simple.formula(attributes=allFeatures, class="housingtype"),
data=CreateAll)
consistency(formula=as.simple.formula(attributes=allFeatures, class="housingtype"),
data=CreateAll)
#5-fold cross-validation
#setting seed with specific value
set.seed(1506)
#adding new column
CreateAll$crossfolds <- sample(1:5, size=nrow(CreateAll), replace=TRUE)
#create new empty lists to store the interim results
results_has_children <- list()
results_pNumResidents <- list()
results_housing_type <- list()
#create a formula for the cross-validation process for each dependent variable
#has_children
for(foldIndex in 1:5){
# creating test and trainigsdata
testdata_has_children <- na.omit(CreateAll[CreateAll$crossfolds==foldIndex, c("hasChildren", SmartMeter_hasChildren)])
traindata_has_children <- na.omit(CreateAll[CreateAll$crossfolds!=foldIndex, c("hasChildren", SmartMeter_hasChildren)])
model.svm <- svm(hasChildren ~ . , data=traindata_has_children, probability=T)
results_has_children[[foldIndex]] <- list()
results_has_children[[foldIndex]]$model.svm <- model.svm
clres.svm <- predict(model.svm, newdata=testdata_has_children, probability=T)
results_has_children[[foldIndex]]$probs <- attributes(clres.svm)$probabilities
cm.svm <- table(clres.svm, testdata_has_children$hasChildren)
results_has_children[[foldIndex]]$cm.svm <- cm.svm
results_has_children[[foldIndex]]$accuracy.svm <- (accuracy.svm <- (sum(diag(cm.svm))/sum(as.vector(cm.svm))))
model.rf <- randomForest(hasChildren ~ . , data=traindata_has_children[c("hasChildren", SmartMeter_hasChildren)])
results_has_children[[foldIndex]]$model.rf <- model.rf
clres.rf <- predict(model.rf, newdata=testdata_has_children[c("hasChildren", SmartMeter_hasChildren)])
results_has_children[[foldIndex]]$probs <- attributes(clres.rf)$probabilities
cm.rf <- table(clres.rf, testdata_has_children$hasChildren)
results_has_children[[foldIndex]]$cm.rf <- cm.rf
results_has_children[[foldIndex]]$accuracy.rf <- (accuracy.rf <- (sum(diag(cm.rf))/sum(as.vector(cm.rf))))
results_has_children[[foldIndex]]$labels <- testdata_has_children$hasChildren
}
results_has_children
#pNumResidents
for(foldIndex in 1:5){
# creating test and trainigsdata
testdata_pNumResidents <- na.omit(CreateAll[CreateAll$crossfolds==foldIndex, c("pNumResidents", SmartMeter_pNumResidents)])
traindata_pNumResidents <- na.omit(CreateAll[CreateAll$crossfolds!=foldIndex, c("pNumResidents", SmartMeter_pNumResidents)])
model.svm <- svm(pNumResidents ~ . , data=traindata_pNumResidents, probability=T)
results_pNumResidents[[foldIndex]] <- list()
results_pNumResidents[[foldIndex]]$model.svm <- model.svm
clres.svm <- predict(model.svm, newdata=testdata_pNumResidents, probability=T)
results_pNumResidents[[foldIndex]]$probs <- attributes(clres.svm)$probabilities
cm.svm <- table(clres.svm, testdata_pNumResidents$pNumResidents)
results_pNumResidents[[foldIndex]]$cm.svm <- cm.svm
results_pNumResidents[[foldIndex]]$accuracy.svm <- (accuracy.svm <- (sum(diag(cm.svm))/sum(as.vector(cm.svm))))
model.rf <- randomForest(pNumResidents ~ . , data=traindata_pNumResidents[c("pNumResidents", SmartMeter_pNumResidents)])
results_pNumResidents[[foldIndex]]$model.rf <- model.rf
clres.rf <- predict(model.rf, newdata=testdata_pNumResidents[c("pNumResidents", SmartMeter_pNumResidents)])
results_pNumResidents[[foldIndex]]$probs <- attributes(clres.rf)$probabilities
cm.rf <- table(clres.rf, testdata_pNumResidents$pNumResidents)
results_pNumResidents[[foldIndex]]$cm.rf <- cm.rf
results_pNumResidents[[foldIndex]]$accuracy.rf <- (accuracy.rf <- (sum(diag(cm.rf))/sum(as.vector(cm.rf))))
results_pNumResidents[[foldIndex]]$labels <- testdata_pNumResidents$pNumResidents
}
results_pNumResidents
#housing_type
for(foldIndex in 1:5){
# creating data for the
testdata_housing_type <- na.omit(CreateAll[CreateAll$crossfolds==foldIndex, c("housing.type", SmartMeter_housing_type)])
traindata_housing_type <- na.omit(CreateAll[CreateAll$crossfolds!=foldIndex, c("housing.type", SmartMeter_housing_type)])
model.svm <- svm(housing.type ~ . , data=traindata_housing_type, probability=T)
results_housing_type[[foldIndex]] <- list()
results_housing_type[[foldIndex]]$model.svm <- model.svm
clres.svm <- predict(model.svm, newdata=testdata_housing_type, probability=T)
results_housing_type[[foldIndex]]$probs <- attributes(clres.svm)$probabilities
cm.svm <- table(clres.svm, testdata_housing_type$housing.type)
results_housing_type[[foldIndex]]$cm.svm <- cm.svm
results_housing_type[[foldIndex]]$accuracy.svm <- (accuracy.svm <- (sum(diag(cm.svm))/sum(as.vector(cm.svm))))
model.rf <- randomForest(housing.type ~ . , data=traindata_housing_type[c("housing.type", SmartMeter_housing_type)])
results_housing_type[[foldIndex]]$model.rf <- model.rf
clres.rf <- predict(model.rf, newdata=testdata_housing_type[c("housing.type", SmartMeter_housing_type)])
results_housing_type[[foldIndex]]$probs <- attributes(clres.rf)$probabilities
cm.rf <- table(clres.rf, testdata_housing_type$housing.type)
results_housing_type[[foldIndex]]$cm.rf <- cm.rf
results_housing_type[[foldIndex]]$accuracy.rf <- (accuracy.rf <- (sum(diag(cm.rf))/sum(as.vector(cm.rf))))
results_housing_type[[foldIndex]]$labels <- testdata_housing_type$housing.type
}
results_housing_type
View(testdata_has_children)
#calculate the average accuracy for each dependent variable and machine learing algorithm
#hasChildren
has_children_accuracy_mean_svm <- mean(simplify2array(lapply(X=results_has_children, FUN=function(i) i$accuracy.svm)))
has_children_accuracy_mean_rf <- mean(simplify2array(lapply(X=results_has_children, FUN=function(i) i$accuracy.rf)))
#pNumResidents
pNumResidents_accuracy_mean_svm <- mean(simplify2array(lapply(X=results_pNumResidents, FUN=function(i) i$accuracy.svm)))
pNumResidents_accuracy_mean_rf <- mean(simplify2array(lapply(X=results_pNumResidents, FUN=function(i) i$accuracy.rf)))
#housingtype
housing_type_accuracy_mean_svm <- mean(simplify2array(lapply(X=results_housing_type, FUN=function(i) i$accuracy.svm)))
housing_type_accuracy_mean_rf <- mean(simplify2array(lapply(X=results_housing_type, FUN=function(i) i$accuracy.rf)))
#Print out of mean accuracies
has_children_accuracy_mean_svm
has_children_accuracy_mean_rf
pNumResidents_accuracy_mean_svm
pNumResidents_accuracy_mean_rf
housing_type_accuracy_mean_svm
housing_type_accuracy_mean_rf
#calculate the random guess metric
has_children_randomguess <- 1/(nlevels(customers$has_children))
housing_type_randomguess <- 1/(nlevels(customers$housing_type))
pNumResidents_randomguess <- 1/(nlevels(customers$pNumResidents))
###### compare the results to the random guess metric
### Plot the accuracy and random guesses values for all variables and classifier in one bar chart (with clean axis labels, heading, â¦).
has_children_group <- cbind(has_children_randomguess, has_children_accuracy_mean_svm,has_children_accuracy_mean_rf)
pNumResidents_group <- cbind(pNumResidents_randomguess, pNumResidents_accuracy_mean_svm,pNumResidents_accuracy_mean_rf)
housing_type_group <- cbind(housing_type_randomguess, housing_type_accuracy_mean_svm,housing_type_accuracy_mean_rf)
groups <- cbind(has_children_group,pNumResidents_group,housing_type_group)
barplot(groups,
main="Accuracies and Random Guess Metric",
cex.names=0.7,
space=c(2,0,0,2,0,0,2,0,0),
names.arg=c("", "hasChildren", "", "pNumResidents", "","", "housingtype", "", ""),
ylim=c(0,1),
ylab="probability values",
xlab="variables",
beside=TRUE
)
legend("top",
title="metrics",
legend=c("random guess", "accuracy svm", "accuracy rf"),
box.lty=0)
